{"version":3,"file":"static/js/116.45029d01.chunk.js","mappings":"+OASe,SAASA,EAAT,GAAuC,IAAVC,EAAS,EAATA,MAC1C,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACxB,MAAwBA,EAAIC,OAApBZ,EAAR,EAAQA,KAAMa,EAAd,EAAcA,MACd,OAAQb,GACN,IAAK,OACHC,EAAQY,GACR,MACF,IAAK,QACHV,EAASU,GACT,MACF,IAAK,WACHR,EAAYQ,GACZ,MACF,QACE,OAEL,EAqCKC,EAAY,WAChBb,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAED,OACE,kBAAMU,UAAWC,EAAAA,EAAAA,KAAQC,SA1CN,SAAAN,GAWnB,GAVAA,EAAIO,iBAWS,WAAVpB,GAA+B,KAATE,GACV,KAAbI,GACU,KAAVF,EAEAiB,MAAM,6BALR,CAQA,GAAc,WAAVrB,EAAoB,CACtB,IAAMsB,EAAmB,CAAEpB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,GAIxC,OAHAE,GAASe,EAAAA,EAAAA,IAAWD,IACpBZ,EAAS,kBACTM,GAED,CACDQ,QAAQC,IAAI,CAAEvB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IAE3B,IAAMoB,EAAgB,CAAEtB,MAAAA,EAAOE,SAAAA,GAC/BE,GAASmB,EAAAA,EAAAA,IAAUD,IAEnBhB,EAAS,aACTM,GAdC,CAeF,EASkDY,aAAa,MAA9D,WACE,mBAAOX,UAAWC,EAAAA,EAAAA,MAAlB,kBAEE,kBACED,UAAWC,EAAAA,EAAAA,MACXW,KAAK,OACL3B,KAAK,OACLa,MAAOb,EACP4B,SAAUlB,EACVmB,UAAQ,QAGZ,mBAAOd,UAAWC,EAAAA,EAAAA,MAAlB,mBAEE,kBACED,UAAWC,EAAAA,EAAAA,MACXW,KAAK,MACL3B,KAAK,QACLa,MAAOX,EACP0B,SAAUlB,EACVmB,UAAQ,QAGZ,mBAAOd,UAAWC,EAAAA,EAAAA,MAAlB,sBAEE,kBACED,UAAWC,EAAAA,EAAAA,MACXW,KAAK,MACL3B,KAAK,WACLa,MAAOT,EACPwB,SAAUlB,EACVmB,UAAQ,QAGZ,mBAAQd,UAAWC,EAAAA,EAAAA,OAAUW,KAAK,SAAlC,2BAgBL,C,+DCjHD,UATkB,WAChB,OACE,iBAAKZ,UAAWC,EAAAA,EAAAA,UAAhB,WACE,eAAID,UAAWC,EAAAA,EAAAA,MAAf,8BACA,SAAC,IAAD,CAAmBlB,MAAM,YAG9B,C,qBCTD,KAAgB,UAAY,qCAAqC,MAAQ,iCAAiC,KAAO,gCAAgC,MAAQ,iCAAiC,MAAQ,iC","sources":["components/authorizationForm/AuthorizationForm.jsx","pages/loginPage/LoginPage.jsx","webpack://react-homework-template/./src/components/authorizationForm/AuthorizationForm.module.css?8f1e"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  // useSelector,\n  useDispatch,\n} from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { signupUser, loginUser } from '../../redux/auth/authOperations';\nimport s from './AuthorizationForm.module.css';\n\nexport default function AuthorizationForm({ title }) {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleChangeInput = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    // const repeatName = items.find(el => {\n    //   return el.name.toLowerCase() === name.toLowerCase();\n    // });\n    // if (repeatName) {\n    //   alert(`${name} ia already in contacts`);\n    //   return;\n    // }\n    // const oneContact = { name, phone };\n    // dispatch();\n    if (\n      (title === 'SignUp' && name === '') ||\n      password === '' ||\n      email === ''\n    ) {\n      alert('completed all fields ');\n      return;\n    }\n    if (title === 'SignUp') {\n      const userRegisterData = { name, email, password };\n      dispatch(signupUser(userRegisterData));\n      navigate('/contacts');\n      resetForm();\n      return;\n    }\n    console.log({ name, email, password });\n\n    const userLoginData = { email, password };\n    dispatch(loginUser(userLoginData));\n\n    navigate('/contacts');\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={s.lable}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChangeInput}\n          required\n        />\n      </label>\n      <label className={s.lable}>\n        Email\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"email\"\n          value={email}\n          onChange={handleChangeInput}\n          required\n        />\n      </label>\n      <label className={s.lable}>\n        Password\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"password\"\n          value={password}\n          onChange={handleChangeInput}\n          required\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n        {/* {location === '/login' ? 'Login' : 'Sign Up'} */}\n      </button>\n\n      {/* <div className={styles.errorContainer}>\n          {error && (\n            <p className={styles.error}>\n              {location === '/login'\n                ? ' Incorrect email or password'\n                : 'This email is alredy used'}\n            </p>\n          )}\n        </div> */}\n    </form>\n  );\n}\n","import AuthorizationForm from '../../components/authorizationForm/AuthorizationForm';\nimport s from '../../components/authorizationForm/AuthorizationForm.module.css';\n\nconst LoginPage = () => {\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Go to your acc!</h1>\n      <AuthorizationForm title=\"Login\" />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AuthorizationForm_container__F+AOg\",\"title\":\"AuthorizationForm_title__HgBI5\",\"form\":\"AuthorizationForm_form__W7p8V\",\"lable\":\"AuthorizationForm_lable__njDe1\",\"input\":\"AuthorizationForm_input__c0PLu\"};"],"names":["AuthorizationForm","title","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","navigate","useNavigate","handleChangeInput","evt","target","value","resetForm","className","s","onSubmit","preventDefault","alert","userRegisterData","signupUser","console","log","userLoginData","loginUser","autoComplete","type","onChange","required"],"sourceRoot":""}